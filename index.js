const zbase32 = require ('zbase32');
const secp = require("noble-secp256k1");

/**
 * Algorithm according to https://twitter.com/rusty_twit/status/1182102005914800128
 * zbase32(SigRec(SHA256(SHA256("Lightning Signed Message:" + msg))))
 */

// Message generated by lightning-cli signmessage test or lncli signmessage --msg test
// Pubkey 02ac77f9f7397a64861b573c9e8b8652ce2e67a05150fd166831e9fc167670dfd8


const signedMessageZbase32 = 'rbwzq7bjg1iw4xthgt463a1d88w5k4zmum9z3xtfbnhc7r3qoizrn8edgwtp8m5m6xfms7pcyccjuggr934tkkjwzewsid44zqub4iux';

const signedMessage = zbase32.decode(signedMessageZbase32);
console.log('signedMessage', signedMessage);
/**
 * Output:
 * signedMessage Uint8Array(65) [
   32, 105, 119, 116,  41,  52, 171,  77,  62,  60,  52,
  117, 236, 226,  67,  57, 233, 181, 106, 235, 154, 255,
  124, 190,  37,   8, 184, 206, 147,  46, 133, 110,  65,
   29,   3,  53,  34, 211, 175, 107, 243, 202, 187, 117,
  172,   3,  24, 153, 152, 196, 254, 117,  21,  41,  52,
  186,  41, 106, 143,  90, 187, 166,  29,  86, 111
]
 */

const recoveryId = signedMessage[0] - 31;
const signature = signedMessage.slice(1, 65);

console.log('signature', signature, 'recoveryId', recoveryId);
/**
 * Output:
 * signature Uint8Array(64) [
  105, 119, 116,  41,  52, 171,  77,  62,  60,  52, 117,
  236, 226,  67,  57, 233, 181, 106, 235, 154, 255, 124,
  190,  37,   8, 184, 206, 147,  46, 133, 110,  65,  29,
    3,  53,  34, 211, 175, 107, 243, 202, 187, 117, 172,
    3,  24, 153, 152, 196, 254, 117,  21,  41,  52, 186,
   41, 106, 143,  90, 187, 166,  29,  86, 111
] 
recoveryId 1
 */

secp.Signature.fromHex(signature); // throws Error('Signature.fromHex: Invalid signature')
// secp.recoverPublicKey throws the same error


